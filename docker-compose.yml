version: "3.9"

x-credentials: &postgres-config
  POSTGRES_HOSTNAME: database
  POSTGRES_PORT: "5432"
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: PaSsW0Rd
  POSTGRES_DB: postgres
  POSTGRES_MIGRATION_FOLDER: /usr/local/bin/migrations/
  POSTGRES_MULTIPLE_DATABASES: postgres,w3bstream
  POSTGRES_W3BSTREAM_DB: w3bstream

services:
  hardhat:
    image: cartesi/rollups-hardhat:0.8.2
    command:
      [
        "node",
        "--network",
        "hardhat",
        "--export",
        "/opt/cartesi/share/blockchain/localhost.json",
      ]
    init: true
    ports:
      - "8545:8545"
    healthcheck:
      test:
        ["CMD", "test", "-f", "/opt/cartesi/share/blockchain/localhost.json"]
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - ./deployments:/app/rollups/deployments

  rollups_dispatcher:
    image: cartesi/rollups-dispatcher:0.8.2
    command:
      [
        "--rd-dapp-contract-address-file",
        "/deployments/localhost/dapp.json",
        "--rd-initial-epoch",
        "0",
        "--sc-grpc-endpoint",
        "http://state_server:50051",
        "--sc-default-confirmations",
        "1",
        "--tx-provider-http-endpoint",
        "http://hardhat:8545",
        "--tx-mnemonic",
        "test test test test test test test test test test test junk",
        "--tx-chain-id",
        "31337",
        "--tx-chain-is-legacy",
        "${TX_LEGACY:-false}",
        "--tx-default-confirmations",
        "2",
        "--redis-endpoint",
        "redis://redis:6379",
      ]
    restart: always
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_set_interval:
        condition: service_completed_successfully
      state_server:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RUST_LOG: info
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain:ro
      - ./deployments:/deployments

  state_server:
    image: cartesi/rollups-state-server:0.8.2
    command: [
        "--sf-genesis-block",
        "0x1",
        "--sf-safety-margin",
        "1",
        "--bh-http-endpoint",
        "http://hardhat:8545",
        "--bh-ws-endpoint",
        "ws://hardhat:8545",
        "--bh-block-timeout",
        "8", # just a few seconds more than the configured automatic interval mining
      ]
    restart: always
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      hardhat:
        condition: service_healthy
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain:ro
    environment:
      RUST_LOG: info

  server_manager_broker_proxy:
    image: cartesi/rollups-server-manager-broker-proxy:0.8.2
    command:
      [
        "--chain-id",
        "31337",
        "--dapp-contract-address-file",
        "/deployments/localhost/dapp.json",
        "--redis-endpoint",
        "redis://redis:6379",
        "--server-manager-endpoint",
        "http://server_manager:5001",
        "--session-id",
        "default_rollups_id",
      ]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      server_manager:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    volumes:
      - ./deployments:/deployments
    environment:
      RUST_LOG: info

  server_manager:
    restart: always
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:5001"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - machine:/opt/cartesi/share/dapp-bin
    environment:
      - SERVER_MANAGER_LOG_LEVEL=warning
      - REMOTE_CARTESI_MACHINE_LOG_LEVEL=info

  deployer:
    image: cartesi/rollups-cli:0.8.2
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      server_manager:
        condition: service_healthy
    command:
      [
        "create",
        "--rpc",
        "http://hardhat:8545",
        "--deploymentFile",
        "/opt/cartesi/share/blockchain/localhost.json",
        "--mnemonic",
        "test test test test test test test test test test test junk",
        "--templateHashFile",
        "/opt/cartesi/share/dapp-bin/hash",
        "--outputFile",
        "/deployments/localhost/dapp.json",
      ]
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - machine:/opt/cartesi/share/dapp-bin:ro
      - ./deployments:/deployments

  hardhat_stop_automine:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setAutomine","params":[false]}',
        "http://hardhat:8545",
      ]

  hardhat_set_interval:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_stop_automine:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setIntervalMining","params":[5000]}',
        "http://hardhat:8545",
      ]

  rollups_inspect_server:
    image: cartesi/rollups-inspect-server:0.8.2
    command:
      [
        "--inspect-server-address",
        "0.0.0.0:5005",
        "--server-manager-address",
        "server_manager:5001",
        "--session-id",
        "default_rollups_id",
      ]
    restart: always
    ports:
      - "5005:5005"
    depends_on:
      server_manager:
        condition: service_healthy
    environment:
      RUST_LOG: info

  rollups_indexer:
    image: cartesi/rollups-indexer:0.8.2
    command:
      [
        "--dapp-contract-address-file",
        "/deployments/localhost/dapp.json",
        "--session-id",
        "default_rollups_id",
        "--initial-epoch",
        "0",
        "--interval",
        "10",
        "--confirmations",
        "1",
        "--state-server-endpoint",
        "http://state_server:50051",
        "--mm-endpoint",
        "http://server_manager:5001",
      ]
    restart: always
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_set_interval:
        condition: service_completed_successfully
      state_server:
        condition: service_healthy
      server_manager:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      <<: *postgres-config
      RUST_LOG: info
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - ./deployments:/deployments

  query_server:
    image: cartesi/query-server:0.8.2
    ports:
      - "4000:4000"
    depends_on:
      database:
        condition: service_healthy
    environment:
      RUST_LOG: info
      GRAPHQL_HOST: "0.0.0.0"
      GRAPHQL_PORT: "4000"
      <<: *postgres-config

  database:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PaSsW0Rd}
    volumes:
      - database-data:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data


  w3bapp:
    image: ${WS_BACKEND_IMAGE:-ghcr.io/machinefi/w3bstream:main}
    depends_on:
      - "database"
      - "mqtt_server"
    container_name: w3bstream
    working_dir: /w3bstream
    restart: always
    ports:
      - "8889:8889"
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "--fail", "localhost:8889"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      SRV_APPLET_MGR__EthClient_Endpoints: '{"31337": "http://hardhat:8545","4689": "https://babel-api.mainnet.iotex.io", "4690": "https://babel-api.testnet.iotex.io", "1": "https://ethereum.iotex.one/v1/mainnet", "5": "https://ethereum.iotex.one/v1/goerli", "137": "https://polygon-rpc.com", "80001": "https://mumbai.polygonscan.com/"}'
      SRV_APPLET_MGR__ETHCLIENTCONFIG__PrivateKey: ${PRIVATE_KEY:-""}
      SRV_APPLET_MGR__Jwt_ExpIn: ${JWT_EXPIN:-1h}
      SRV_APPLET_MGR__Jwt_Issuer: ${JWT_ISSUER:-w3bstream}
      SRV_APPLET_MGR__Postgres_Master: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432/${POSTGRES_W3BSTREAM_DB:-w3bstream}?sslmode=disable
      SRV_APPLET_MGR__MonitorDB_Master: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432/${POSTGRES_W3BSTREAM_DB:-w3bstream}?sslmode=disable
      SRV_APPLET_MGR__WasmDB: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432?sslmode=disable
      SRV_APPLET_MGR__MqttBroker_Server: mqtt://mqtt_server:1883
      SRV_APPLET_MGR__Server_Port: "8888"
      SRV_APPLET_MGR__ServerEvent_Port: "8889"
      SRV_APPLET_MGR__LocalFS_Root: /w3bstream/asserts
      # SRV_APPLET_MGR__Redis_Host: "redis"
      # SRV_APPLET_MGR__Redis_Password: ${REDIS_PASSWORD:-w3bredispasS}
      PRIVATE_KEY: ${PRIVATE_KEY:-}
    volumes:
      - w3bstream-data:/w3bstream/asserts

  w3bstream-studio:
    image: ${WS_STUDIO_IMAGE:-ghcr.io/machinefi/w3bstream-studio:main}
    container_name: w3bstream-studio
    restart: always
    platform: linux/x86_64
    working_dir: /w3bstream-studio
    command: ['node', 'server.js']
    depends_on:
      - 'database'
      - 'w3bapp'
    ports:
      - '3001:3000'
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432/${POSTGRES_W3BSTREAM_DB:-w3bstream}
      DATABASE_URL_APPLET_MANAGEMENT: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432/${POSTGRES_W3BSTREAM_DB:-w3bstream}?schema=applet_management
      DATABASE_URL_MONITOR: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-PaSsW0Rd}@database:5432/${POSTGRES_W3BSTREAM_DB:-w3bstream}?schema=monitor
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://w3bapp:8888}
      NEXT_PUBLIC_EVENT_URL: ${NEXT_PUBLIC_EVENT_URL:-http://w3bapp:8889}
      NEXT_PUBLIC_MQTT_URL: ${NEXT_PUBLIC_MQTT_URL:-mqtt://mqtt_server:1883}
      NEXT_PUBLIC_METRICS_URL: ${NEXT_PUBLIC_METRICS_URL:-http://prometheus:9090}
      ADMIN_KEY: ${ADMIN_KEY:-iotex.W3B.admin}
      JWT_SIGN_KEY: ${JWT_SIGN_KEY:-xxxx}

  mqtt_server:
    image: eclipse-mosquitto:1.6.15
    container_name: mosquitto
    restart: always
    ports:
      - "1883:1883"
    volumes:
      - mqtt-data:/mosquitto/data

  db_client:
    build: 
      context:
        ./build/pg-client
    depends_on:
      w3bapp:
        condition: service_healthy
    environment:
      PGHOST: database
      PGPASSWORD: ${POSTGRES_PASSWORD:-PaSsW0Rd} 
    command: "psql -U ${POSTGRES_USER:-postgres} -d w3bstream -c \"INSERT INTO monitor.t_blockchain (f_chain_id,f_chain_address) values (31337,'http://hardhat:8545') ON CONFLICT DO NOTHING;\""
    

  # postgres:
  #   image: postgres:13
  #   restart: always
  #   command:
  #     [
  #       "postgres",
  #       "-cshared_preload_libraries=pg_stat_statements"
  #     ]
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER:-w3badmin}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PaSsW0Rd}
  #     POSTGRES_DB: ${POSTGRES_DB:-w3bstream}
  #   volumes:
  #     - ${WS_WORKING_DIR:-.}/postgres:/var/lib/postgresql/data
  #   ports:
  #     - "54321:5432"

  # redis:
  #   image: 'redis:6.2'
  #   restart: always
  #   volumes:
  #     - ${WS_WORKING_DIR:-.}/redisdb:/data
  #   environment:
  #     REDIS_PASSWORD: ${REDIS_PASSWORD:-w3bredispasS}
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-w3bredispasS}
  #   ports:
  #     - '60379:6379'

  prometheus:
    image: imoocc/prometheus:latest
    depends_on:
      - "w3bapp"
    user: root
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    container_name: prometheus
    restart: always
    volumes:
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"


volumes:
  blockchain-data: {}
  machine: {}
  database-data: {}
  redis-data: {}
  w3bstream-data: {}
  prometheus-data: {}
  mqtt-data: {}
