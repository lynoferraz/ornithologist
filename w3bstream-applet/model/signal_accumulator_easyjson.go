// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAcbdb077DecodeBirdwatchModel(in *jlexer.Lexer, out *SignalAccumulator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lats":
			if in.IsNull() {
				in.Skip()
				out.Latitudes = nil
			} else {
				in.Delim('[')
				if out.Latitudes == nil {
					if !in.IsDelim(']') {
						out.Latitudes = make([]float32, 0, 16)
					} else {
						out.Latitudes = []float32{}
					}
				} else {
					out.Latitudes = (out.Latitudes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float32
					v1 = float32(in.Float32())
					out.Latitudes = append(out.Latitudes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lons":
			if in.IsNull() {
				in.Skip()
				out.Longitudes = nil
			} else {
				in.Delim('[')
				if out.Longitudes == nil {
					if !in.IsDelim(']') {
						out.Longitudes = make([]float32, 0, 16)
					} else {
						out.Longitudes = []float32{}
					}
				} else {
					out.Longitudes = (out.Longitudes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 float32
					v2 = float32(in.Float32())
					out.Longitudes = append(out.Longitudes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tsStart":
			out.TimestampStart = uint32(in.Uint32())
		case "tsEnd":
			out.TimestampEnd = uint32(in.Uint32())
		case "acc":
			out.Account = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAcbdb077EncodeBirdwatchModel(out *jwriter.Writer, in SignalAccumulator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lats\":"
		out.RawString(prefix[1:])
		if in.Latitudes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Latitudes {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lons\":"
		out.RawString(prefix)
		if in.Longitudes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Longitudes {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tsStart\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimestampStart))
	}
	{
		const prefix string = ",\"tsEnd\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimestampEnd))
	}
	{
		const prefix string = ",\"acc\":"
		out.RawString(prefix)
		out.String(string(in.Account))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignalAccumulator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAcbdb077EncodeBirdwatchModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignalAccumulator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAcbdb077EncodeBirdwatchModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignalAccumulator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAcbdb077DecodeBirdwatchModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignalAccumulator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAcbdb077DecodeBirdwatchModel(l, v)
}
